package intern;

public class Sudoku
{
    public static void main(String[] args) 
    {
        int[][] sudokuGrid = {
                {5, 3, 0, 0, 7, 0, 0, 0, 0},
                {6, 0, 0, 1, 9, 5, 0, 0, 0},
                {0, 9, 8, 0, 0, 0, 0, 6, 0},
                {8, 0, 0, 0, 6, 0, 0, 0, 3},
                {4, 0, 0, 8, 0, 3, 0, 0, 1},
                {7, 0, 0, 0, 2, 0, 0, 0, 6},
                {0, 6, 0, 0, 0, 0, 2, 8, 0},
                {0, 0, 0, 4, 1, 9, 0, 0, 5},
                {0, 0, 0, 0, 8, 0, 0, 7, 9}
        };
        if (solveSudoku(sudokuGrid))
        {
            printSudoku(sudokuGrid);
        } else 
        {
            System.out.println("No solution exists.");
        }
    }
    private static boolean solveSudoku(int[][] grid) 
    {
        int N = grid.length;
        int[] emptyLocation = findEmptyLocation(grid);
        int row = emptyLocation[0];
        int col = emptyLocation[1];
        if (row == -1 && col == -1) 
        {
            return true;
        }
        for (int num = 1; num <= N; num++) 
        {
            if (isSafe(grid, row, col, num)) 
            {
                grid[row][col] = num;
                if (solveSudoku(grid))
                {
                    return true;
                }
                grid[row][col] = 0;
            }
        }
        return false;
    }
    private static int[] findEmptyLocation(int[][] grid) {
        int N = grid.length;

        for (int i = 0; i < N; i++) 
        {
            for (int j = 0; j < N; j++) 
            {
                if (grid[i][j] == 0) 
                {
                    return new int[]{i, j};
                }
            }
        }
        return new int[]{-1, -1};
    }
    private static boolean isSafe(int[][] grid, int row, int col, int num) 
    {
        return !usedInRow(grid, row, num) && !usedInColumn(grid, col, num) && !usedInBox(grid, row - row % 3, col - col % 3, num);
    }
    private static boolean usedInRow(int[][] grid, int row, int num) 
    {
        for (int col = 0; col < grid.length; col++) 
        {
            if (grid[row][col] == num) 
            {
                return true;
            }
        }
        return false;
    }
    private static boolean usedInColumn(int[][] grid, int col, int num) 
    {
        for (int row = 0; row < grid.length; row++) 
        {
            if (grid[row][col] == num) 
            {
                return true;
            }
        }
        return false;
    }
    private static boolean usedInBox(int[][] grid, int boxStartRow, int boxStartCol, int num) 
    {
        int boxSize = 3;
        for (int row = 0; row < boxSize; row++) 
        {
            for (int col = 0; col < boxSize; col++) 
            {
                if (grid[row + boxStartRow][col + boxStartCol] == num) 
                {
                    return true;
                }
            }
        }
        return false;
    }
    private static void printSudoku(int[][] grid) 
    {
        int N = grid.length;
        for (int i = 0; i < N; i++) 
        {
            for (int j = 0; j < N; j++) 
            {
                System.out.print(grid[i][j] + " ");
            }
            System.out.println();
        }
    }
}
